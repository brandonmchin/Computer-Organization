Microsoft (R) Macro Assembler Version 10.00.30319.01	    05/14/15 18:13:45
<C:\Users\brandon\Documents\Systems Organization\Classwork\4  Page 1 - 1


				; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

					TITLE	C:\Users\brandon\Documents\Systems Organization\Classwork\4-23_Matrix\Matrix Optimization\Matrix Optimization\matrix_multiplication.cpp
					.686P
					.XMM
					include listing.inc
			      C ;; LISTING.INC
			      C ;;
			      C ;; This file contains assembler macros and is included by the files created
			      C ;; with the -FA compiler switch to be assembled by MASM (Microsoft Macro
			      C ;; Assembler).
			      C ;;
			      C ;; Copyright (c) 1993-2003, Microsoft Corporation. All rights reserved.
			      C 
			      C ;; non destructive nops
			      C npad macro size
			      C if size eq 1
			      C   nop
			      C else
			      C  if size eq 2
			      C    mov edi, edi
			      C  else
			      C   if size eq 3
			      C     ; lea ecx, [ecx+00]
			      C     DB 8DH, 49H, 00H
			      C   else
			      C    if size eq 4
			      C      ; lea esp, [esp+00]
			      C      DB 8DH, 64H, 24H, 00H
			      C    else
			      C     if size eq 5
			      C       add eax, DWORD PTR 0
			      C     else
			      C      if size eq 6
			      C        ; lea ebx, [ebx+00000000]
			      C        DB 8DH, 9BH, 00H, 00H, 00H, 00H
			      C      else
			      C       if size eq 7
			      C 	; lea esp, [esp+00000000]
			      C 	DB 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H 
			      C       else
			      C        if size eq 8
			      C         ; jmp .+8; .npad 6
			      C 	DB 0EBH, 06H, 8DH, 9BH, 00H, 00H, 00H, 00H
			      C        else
			      C         if size eq 9
			      C          ; jmp .+9; .npad 7
			      C          DB 0EBH, 07H, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H
			      C         else
			      C          if size eq 10
			      C           ; jmp .+A; .npad 7; .npad 1
			      C           DB 0EBH, 08H, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H, 90H
			      C          else
			      C           if size eq 11
			      C            ; jmp .+B; .npad 7; .npad 2
			      C            DB 0EBH, 09H, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H, 8BH, 0FFH
			      C           else
			      C            if size eq 12
			      C             ; jmp .+C; .npad 7; .npad 3
			      C             DB 0EBH, 0AH, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H, 8DH, 49H, 00H
			      C            else
			      C             if size eq 13
			      C              ; jmp .+D; .npad 7; .npad 4
			      C              DB 0EBH, 0BH, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H, 8DH, 64H, 24H, 00H
			      C             else
			      C              if size eq 14
			      C               ; jmp .+E; .npad 7; .npad 5
			      C               DB 0EBH, 0CH, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H, 05H, 00H, 00H, 00H, 00H
			      C              else
			      C               if size eq 15
			      C                ; jmp .+F; .npad 7; .npad 6
			      C                DB 0EBH, 0DH, 8DH, 0A4H, 24H, 00H, 00H, 00H, 00H, 8DH, 9BH, 00H, 00H, 00H, 00H
			      C               else
			      C 	       %out error: unsupported npad size
			      C                .err
			      C               endif
			      C              endif
			      C             endif
			      C            endif
			      C           endif
			      C          endif
			      C         endif
			      C        endif
			      C       endif
			      C      endif
			      C     endif
			      C    endif
			      C   endif
			      C  endif
			      C endif
			      C endm
			      C 
			      C ;; destructive nops
			      C dpad macro size, reg
			      C if size eq 1
			      C   inc reg
			      C else
			      C   %out error: unsupported dpad size
			      C   .err
			      C endif
			      C endm
			      C 
					.model	flat

				INCLUDELIB MSVCRTD
				INCLUDELIB OLDNAMES

				PUBLIC	?matrix_multiplication@@YAXXZ			; matrix_multiplication
				EXTRN	__fltused:DWORD
				EXTRN	__RTC_Shutdown:PROC
				EXTRN	__RTC_InitBase:PROC
 00000000			_BSS	SEGMENT
 00000000  00000040 [		_S	DD	040H DUP (?)
	    00000000
	   ]
 00000100  00000040 [		_B	DD	040H DUP (?)
	    00000000
	   ]
 00000200  00000040 [		_A	DD	040H DUP (?)
	    00000000
	   ]
 00000300			_BSS	ENDS
				;	COMDAT rtc$TMZ
				; File c:\users\brandon\documents\systems organization\classwork\4-23_matrix\matrix optimization\matrix optimization\matrix_multiplication.cpp
 00000000			rtc$TMZ	SEGMENT
				;__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
 00000000			rtc$TMZ	ENDS
				;	COMDAT rtc$IMZ
 00000000			rtc$IMZ	SEGMENT
				;__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
				; Function compile flags: /Odtp /RTCsu /ZI
 00000000			rtc$IMZ	ENDS
				;	COMDAT ?matrix_multiplication@@YAXXZ
 00000000			_TEXT	SEGMENT
 =-00000020			_k$4448 = -32						; size = 4
 =-00000014			_j$4444 = -20						; size = 4
 =-00000008			_i$4440 = -8						; size = 4
 00000000			?matrix_multiplication@@YAXXZ PROC			; matrix_multiplication, COMDAT

				; 6    : {

 00000000  55				push	ebp
 00000001  8B EC			mov	ebp, esp
 00000003  81 EC 000000E4		sub	esp, 228				; 000000e4H
 00000009  53				push	ebx
 0000000A  56				push	esi
 0000000B  57				push	edi
 0000000C  8D BD FFFFFF1C		lea	edi, DWORD PTR [ebp-228]
 00000012  B9 00000039			mov	ecx, 57					; 00000039H
 00000017  B8 CCCCCCCC			mov	eax, -858993460				; ccccccccH
 0000001C  F3/ AB			rep stosd

				; 7    : 	for (int i = 0; i < size; i++)

 0000001E  C7 45 F8			mov	DWORD PTR _i$4440[ebp], 0
	   00000000
 00000025  EB 04			jmp	SHORT $LN9@matrix_mul
 00000027			$LN8@matrix_mul:
					;mov	eax, DWORD PTR _i$4440[ebp]
					;add	eax, 1
					;mov	DWORD PTR _i$4440[ebp], eax
 00000027  83 45 F8 01			add		DWORD PTR _i$4440[ebp], 1
 0000002B			$LN9@matrix_mul:
 0000002B  83 7D F8 08			cmp	DWORD PTR _i$4440[ebp], 8
 0000002F  0F 8D 00000092		jge	$LN7@matrix_mul

				; 8    : 	{
				; 9    : 		for (int j = 0; j < size; j++)

 00000035  C7 45 EC			mov	DWORD PTR _j$4444[ebp], 0
	   00000000
 0000003C  EB 04			jmp	SHORT $LN6@matrix_mul
 0000003E			$LN5@matrix_mul:
					;mov	eax, DWORD PTR _j$4444[ebp]
					;add	eax, 1
					;mov	DWORD PTR _j$4444[ebp], eax
 0000003E  83 45 EC 01			add		DWORD PTR _j$4444[ebp], 1
 00000042			$LN6@matrix_mul:
 00000042  83 7D EC 08			cmp	DWORD PTR _j$4444[ebp], 8
 00000046  7D 7A			jge	SHORT $LN4@matrix_mul

				; 10   : 		{
				; 11   : 			for (int k = 0; k < size; k++)

 00000048  C7 45 E0			mov	DWORD PTR _k$4448[ebp], 0
	   00000000
 0000004F  EB 04			jmp	SHORT $LN3@matrix_mul
 00000051			$LN2@matrix_mul:
					;mov	eax, DWORD PTR _k$4448[ebp]
					;add	eax, 1
					;mov	DWORD PTR _k$4448[ebp], eax
 00000051  83 45 E0 01			add		DWORD PTR _k$4448[ebp], 1
 00000055			$LN3@matrix_mul:
 00000055  83 7D E0 08			cmp	DWORD PTR _k$4448[ebp], 8
 00000059  7D 62			jge	SHORT $LN1@matrix_mul

				; 12   : 			{
				; 13   : 				S[i][j] += A[i][k] * B[k][j];

 0000005B  8B 45 F8			mov	eax, DWORD PTR _i$4440[ebp]
 0000005E  C1 E0 05			shl	eax, 5
 00000061  8B 4D F8			mov	ecx, DWORD PTR _i$4440[ebp]
 00000064  C1 E1 05			shl	ecx, 5
 00000067  8B 55 E0			mov	edx, DWORD PTR _k$4448[ebp]
 0000006A  C1 E2 05			shl	edx, 5
 0000006D  8B 75 E0			mov	esi, DWORD PTR _k$4448[ebp]
 00000070  F3/ 0F 10 84 B1		movss	xmm0, DWORD PTR _A[ecx+esi*4]
	   00000200 R
 00000079  0F 5A C0			cvtps2pd xmm0, xmm0
 0000007C  8B 4D EC			mov	ecx, DWORD PTR _j$4444[ebp]
 0000007F  F3/ 0F 10 8C 8A		movss	xmm1, DWORD PTR _B[edx+ecx*4]
	   00000100 R
 00000088  0F 5A C9			cvtps2pd xmm1, xmm1
 0000008B  F2/ 0F 59 C1			mulsd	xmm0, xmm1
 0000008F  8B 55 EC			mov	edx, DWORD PTR _j$4444[ebp]
 00000092  F3/ 0F 10 8C 90		movss	xmm1, DWORD PTR _S[eax+edx*4]
	   00000000 R
 0000009B  0F 5A C9			cvtps2pd xmm1, xmm1
 0000009E  F2/ 0F 58 C8			addsd	xmm1, xmm0
 000000A2  8B 45 F8			mov	eax, DWORD PTR _i$4440[ebp]
 000000A5  C1 E0 05			shl	eax, 5
 000000A8  0F 57 C0			xorps	xmm0, xmm0
 000000AB  F2/ 0F 5A C1			cvtsd2ss xmm0, xmm1
 000000AF  8B 4D EC			mov	ecx, DWORD PTR _j$4444[ebp]
 000000B2  F3/ 0F 11 84 88		movss	DWORD PTR _S[eax+ecx*4], xmm0
	   00000000 R

				; 14   : 			}

 000000BB  EB 94			jmp	SHORT $LN2@matrix_mul
 000000BD			$LN1@matrix_mul:

				; 15   : 		}

 000000BD  E9 FFFFFF7C			jmp	$LN5@matrix_mul
 000000C2			$LN4@matrix_mul:

				; 16   : 	}

 000000C2  E9 FFFFFF60			jmp	$LN8@matrix_mul
 000000C7			$LN7@matrix_mul:

				; 17   : }

 000000C7  5F				pop	edi
 000000C8  5E				pop	esi
 000000C9  5B				pop	ebx
 000000CA  8B E5			mov	esp, ebp
 000000CC  5D				pop	ebp
 000000CD  C3				ret	0
 000000CE			?matrix_multiplication@@YAXXZ ENDP			; matrix_multiplication
 000000CE			_TEXT	ENDS
				END
Microsoft (R) Macro Assembler Version 10.00.30319.01	    05/14/15 18:13:45
<C:\Users\brandon\Documents\Systems Organization\Classwork\4  Symbols 2 - 1




Macros:

                N a m e                 Type

dpad . . . . . . . . . . . . . .	Proc
npad . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_BSS . . . . . . . . . . . . . .	32 Bit	 00000300 	  Private 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000CE Para	  Public  'CODE'	
rtc$IMZ  . . . . . . . . . . . .	32 Bit	 00000000 	  Private 
rtc$TMZ  . . . . . . . . . . . .	32 Bit	 00000000 	  Private 


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

?matrix_multiplication@@YAXXZ  .	P Near	 00000000 _TEXT	Length= 000000CE Public
  $LN8@matrix_mul  . . . . . . .	L Near	 00000027 _TEXT	
  $LN9@matrix_mul  . . . . . . .	L Near	 0000002B _TEXT	
  $LN5@matrix_mul  . . . . . . .	L Near	 0000003E _TEXT	
  $LN6@matrix_mul  . . . . . . .	L Near	 00000042 _TEXT	
  $LN2@matrix_mul  . . . . . . .	L Near	 00000051 _TEXT	
  $LN3@matrix_mul  . . . . . . .	L Near	 00000055 _TEXT	
  $LN1@matrix_mul  . . . . . . .	L Near	 000000BD _TEXT	
  $LN4@matrix_mul  . . . . . . .	L Near	 000000C2 _TEXT	
  $LN7@matrix_mul  . . . . . . .	L Near	 000000C7 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_A . . . . . . . . . . . . . . .	DWord	 00000200 _BSS	
_B . . . . . . . . . . . . . . .	DWord	 00000100 _BSS	
_S . . . . . . . . . . . . . . .	DWord	 00000000 _BSS	
__RTC_InitBase . . . . . . . . .	L Near	 00000000 FLAT	External
__RTC_Shutdown . . . . . . . . .	L Near	 00000000 FLAT	External
__fltused  . . . . . . . . . . .	DWord	 00000000 FLAT	External
_i$4440  . . . . . . . . . . . .	Number	 -00000008h   
_j$4444  . . . . . . . . . . . .	Number	 -00000014h   
_k$4448  . . . . . . . . . . . .	Number	 -00000020h   

	   0 Warnings
	   0 Errors
